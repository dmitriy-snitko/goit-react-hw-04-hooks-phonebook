{"version":3,"sources":["components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.styles.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","App.styles.jsx","App.jsx","index.js"],"names":["Form","styled","form","Title","h3","SubmitBtn","button","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","reset","preventDefault","type","pattern","title","autoComplete","onChange","required","List","ul","Item","li","ContactsList","filtredContacts","deleteContact","map","cont","onClick","id","Label","label","p","Filter","Container","div","h2","App","contacts","setContacts","filter","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","normalizedName","toLowerCase","find","el","alert","newContact","shortid","generate","normalizedFilter","includes","contactId","prevState","contact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.847cc2f0.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nwidth: 400px;\npadding: 10px;\nmargin-bottom: 30px;\ndisplay: grid;\ngrid-template-columns: 1fr;\ngap: 25px;\nborder: 1px solid black;\n`\n\nexport const Title = styled.h3`\nmargin-bottom: 7px;\n`\n\nexport const SubmitBtn = styled.button`\nwidth:172px;\n`","import { useState } from 'react';\nimport { Form, SubmitBtn, Title } from './ContactForm.styles';\nimport PropTypes from 'prop-types';\n\nexport default function ContactForm({onSubmit}) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default: return;\n    };\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    onSubmit(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        <Title>Name: </Title><input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <label>\n        <Title>Number: </Title><input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <SubmitBtn type=\"submit\">Add Contact</SubmitBtn>\n    </Form>\n  )\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\nwidth: 400px;\nlist-style: none;\n`\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: space-between;\npadding-left: 15px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { List, Item } from '../ContactsList/ContactsList.styles';\n\nconst ContactsList = ({ filtredContacts, deleteContact }) => {\n  return (\n    <List>\n      {filtredContacts().map(cont => {\n        return (\n          <Item key={cont.id}>\n            <p>{`${cont.name}: ${cont.number}`}</p>\n            <button onClick={() => deleteContact(cont.id)}>Delete</button>\n          </Item>\n        )\n      })}\n    </List>\n  )\n};\n\nContactsList.propTypes = {\n  filtredContacts: PropTypes.func.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\ndisplay: block;\nmargin-bottom: 15px;\n`\n\nexport const Title = styled.p`\nfont-weight: 500;\nmargin-bottom: 10px;\n`","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Label, Title } from '../Filter/Filter.styles';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <Label>\n      <Title>Find contacts by name:</Title>\n      <input type=\"text\" value={value} onChange={onChange} />\n    </Label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Filter;\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\npadding: 25px;\n`\nexport const Title = styled.h2`\nmargin-bottom: 15px;\n`","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\nimport { Container, Title } from './App.styles.jsx';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    setContacts(JSON.parse(localStorage.getItem('contacts')));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const deleteContact = contactId => {\n    setContacts(prevState => prevState.filter(contact => contact.id !== contactId))\n  };\n\n  const addContact = (name, number) => {\n    const normalizedName = name.toLowerCase();\n    const isAlreadyinContacts = contacts.find(el => el.name.toLowerCase() === normalizedName);\n\n    if (isAlreadyinContacts) {\n      alert(`${name} is already in contacts!`);\n      return;\n    };\n\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number\n    };\n\n    setContacts([newContact, ...contacts]);\n  };\n\n  const changeFilter = e => setFilter(e.currentTarget.value);\n\n  const getFiltredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(cont =>\n      cont.name.toLowerCase().includes(normalizedFilter));\n  };\n\n    return (\n      <Container>\n        <Title>Phonebook</Title>\n        <ContactForm onSubmit={addContact} />\n        <Filter value={filter} onChange={changeFilter} />\n        \n        <Title>Contacts</Title>\n        <ContactsList filtredContacts={getFiltredContacts} deleteContact={deleteContact}/>\n    </Container>\n  );\n};\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}